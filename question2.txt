2. What is Hoisting in Javascript? How does it affect var,let and const?
=> Hoisting is a JavaScript mechanism where variable and function declarations are moved to the top of their containing scope during the compilation phase, before the code is executed. 
This means that you can use variables and functions before their actual declarations in the code. However, this behavior differs depending on whether you use var, let, or const.

    *var:-
        ->Hoisted to the top of the function or global scope.
        ->Initialized with undefined during hoisting.
        ->Can lead to unexpected behavior, especially in loops or conditions, due to its function-level scoping.

    *let:-
        ->Hoisted to the top of the block scope.
        ->Not initialized until the line where it is declared (temporal dead zone).
        ->Accessing it before its declaration results in a ReferenceError.

    *const:-
        ->Hoisted to the top of the block scope.
        ->Not initialized until the line where it is declared (temporal dead zone).
        ->Like let, accessing it before its declaration results in a ReferenceError.
        ->Must be initialized at the time of declaration, and cannot be reassigned.